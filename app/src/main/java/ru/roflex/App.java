/*
 * This source file was generated by the Gradle 'init' task
 */
package ru.roflex;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.Set;
import java.util.stream.Collectors;

import com.fastcgi.FCGIInterface;

public class App {
    private static final String HTTP_OK = """
            Status: 200 OK
            Content-Type: application/json
            Content-Length: %d
            
            %s
            """;

    private static final String HTTP_BAD_REQUEST = """
            Status: 400 Bad Request
            Content-Type: application/json
            Content-Length: %d
            
            {"reason": "%s"}
            """;

    private static final String ONE_SET_RESULT = """
            {
                "X": %.2f,
                "Y": %.2f,
                "R": %d,
                "hit": %b
            }
            """;

    private static final String RESULTS_WRAPPER = """
            {
                "results": [
                    %s
                ],
                "processing_time_ms": %s,
                "current_time": "%s"
            }
            """;

    public static void main(String[] args) throws IOException { // Floats should be either with dot or comma on client, but converted before sending
        FCGIInterface fcgiInterface = new FCGIInterface();
        while (fcgiInterface.FCGIaccept() >= 0) {
            StringBuilder stringBuilder = new StringBuilder();
            for (int c = 0; c != -1; ) {
                c = FCGIInterface.request.inStream.read();
                if (c != -1) {
                    stringBuilder.append((char) c);
                }
            }
            var startTime = Instant.now();
            String body = stringBuilder.toString();
            // System.out.println(body);

            try {
                Params params = new Params(body);
                float Y = params.getY();
                Set<Integer> R = params.getR();
                float X = params.getX();

                String results = R.stream()
                        .map(r -> {
                            boolean isHit = checkHit(X, Y, r);
                            return String.format(ONE_SET_RESULT, X, Y, r, isHit);
                        })
                        .collect(Collectors.joining(","));
                String currentTime = java.time.LocalTime.now().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
                String responseContent = String.format(RESULTS_WRAPPER, results, String.valueOf(Instant.now().toEpochMilli()-startTime.toEpochMilli()), currentTime);
                String response = String.format(HTTP_OK, responseContent.getBytes(StandardCharsets.UTF_8).length, responseContent);
                System.out.println(response);


            } catch (ParamsException e) {
                String response = String.format(HTTP_BAD_REQUEST, ("{\"reason\": \"" + e.getMessage() + "\"}").getBytes(StandardCharsets.UTF_8).length, e.getMessage());
                System.out.println(response);
            }
        }
    }

    private static boolean checkHit(float X, float Y, Integer R) {
        return true;
    }
}

